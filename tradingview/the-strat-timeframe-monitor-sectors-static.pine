//@version=5

// ||###################################################################################||
// ||                                                                                   ||
// || Cipher DMG                                                                        ||
// || Timeframe Sector Monitor in single row                                            ||
// ||                                                                                   ||
// ||###################################################################################||

indicator(title="The Strat Timeframe Monitor Sectors Static", shorttitle="The Strat Timeframe Monitor Sectors Static", max_labels_count = 500, overlay=true)

//bullishColor = input.color(color.new(color.green, 0), title='Bullish Candle Color', group='Colors')
bullishColor = input.color(color.rgb(56,142,60), title='Bullish Candle Color', group='Colors')
bullishTextColor = input.color(color.new(color.white, 0), title='Bullish Text Color', group='Colors')

//bearishColor = input.color(color.new(color.red, 0), title='Bearish Candle Color', group='Colors')
bearishColor = input.color(color.rgb(178,40,51), title='Bearish Candle Color', group='Colors')
bearishTextColor = input.color(color.new(color.white, 0), title='Bearish Text Color', group='Colors')

atrColor = input.color(color.new(color.gray, 0), title='ATR Candle Color', group='Colors')
atrTextColor = input.color(color.new(color.white, 0), title='ATR Text Color', group='Colors')

tfTableOpacity = input.int(50, title='Multi time frame table opacity', group="Colors")

showPercentChange = input.bool(true, title='Show Percent Change', group='Table')
addThreashold = input.float(-1000.00, title='Add Ticker Threashold', group="Add Ticker")

// frameWidth = input.int(3, title='Table Frame Width', group='Table')
cellWidth = input.int(3, title='Table Cell Width', group='Table')

// firstRowTimeframe = input.string("1", title='First Timeframe', group='Time Frame Continuation')
// secondRowTimeframe = input.string('15', title='Second Timeframe', group='Time Frame Continuation')

//##################################################################################################
//Candle Type
//##################################################################################################
getCandleType(_high, _high1, _low, _low1) =>
    candleType = 0

    //Higher High and Lower Low
    if _high > _high1 and _low < _low1
        candleType := 3
        candleType

    else if _high <= _high1 and _low >= _low1
        //Lower High and Higher Low
        if _high <= _high1 and _low >= _low1
            candleType := 1
            candleType
        else
            candleType := 2
            candleType
    candleType



// @function Entire Candle wick to wick is inside the previous candle.  This is considered a Scenario 1.
// It means its consolidation on a smaller timeframe  We do not want to trade things on a 1 because it has Not picked its direction.
// @param idx index to use
// @returns
isInsideCandle(int idx) =>
    high[idx] <= high[idx + 1] and low[idx] >= low[idx + 1]

//@function Candle engulfs the previous candle and is typically the larges bar.  This is considered a Scenario 3
//Most commonly 3s occur after 1
//@return
isOutsideCandle(int idx) =>
    high[idx] > high[idx + 1] and low[idx] < low[idx + 1]


//getPercentChange
getPercentChange(openPrice,closePrice) =>

    //The Percent Change will be the closePrice - openPrice / (max (openPrice, closePrice))
    percentChange = ((closePrice - openPrice) / (math.max(openPrice,closePrice)) ) * 100.0
    resultColor = openPrice >= closePrice ? bearishColor : bullishColor
    timeframeChangeAmt = openPrice >= closePrice ? (openPrice -  closePrice): (closePrice - openPrice)
    resultTextColor = openPrice >= closePrice ? bearishTextColor : bullishTextColor
    [percentChange,timeframeChangeAmt,resultTextColor,resultColor]

// FULL TIME FRAME CONTINUITY CODE:
//reusable function for getting detail on the security
getSecurityByTimeFrame(symbol,timeFrame) =>
    [openValue, closeValue, highValue, lowValue, timeValue] = request.security(symbol = symbol, timeframe = timeFrame, expression = [open, close, high, low, time], gaps = barmerge.gaps_off)

    [percentChange, amountChange, resultTextColor, resultColor] = getPercentChange(openValue,closeValue)
    [openValue, closeValue, highValue, lowValue, timeValue, percentChange,amountChange, resultTextColor, resultColor]


addTableRow(tcTable,symbol1,symbol2,symbol3,symbol4,symbol5,symbol6,symbol7,symbol8,symbol9, symbol10, symbol11, symbol12, symbol13, symbol14, symbol15, symbol16, symbol17, symbol18, timeframePeriod) =>

    [openValue1, closeValue1, highValue1, lowValue1, timeValue1, percentChange1, amountChange1, resultTextColor1, resultColor1] = getSecurityByTimeFrame(symbol1,timeframePeriod)
    [openValue2, closeValue2, highValue2, lowValue2, timeValue2, percentChange2, amountChange2, resultTextColor2, resultColor2] = getSecurityByTimeFrame(symbol2,timeframePeriod)
    [openValue3, closeValue3, highValue3, lowValue3, timeValue3, percentChange3, amountChange3, resultTextColor3, resultColor3] = getSecurityByTimeFrame(symbol3,timeframePeriod)
    [openValue4, closeValue4, highValue4, lowValue4, timeValue4, percentChange4, amountChange4, resultTextColor4, resultColor4] = getSecurityByTimeFrame(symbol4,timeframePeriod)
    [openValue5, closeValue5, highValue5, lowValue5, timeValue5, percentChange5, amountChange5, resultTextColor5, resultColor5] = getSecurityByTimeFrame(symbol5,timeframePeriod)
    [openValue6, closeValue6, highValue6, lowValue6, timeValue6, percentChange6, amountChange6, resultTextColor6, resultColor6] = getSecurityByTimeFrame(symbol6,timeframePeriod)
    [openValue7, closeValue7, highValue7, lowValue7, timeValue7, percentChange7, amountChange7, resultTextColor7, resultColor7] = getSecurityByTimeFrame(symbol7,timeframePeriod)
    [openValue8, closeValue8, highValue8, lowValue8, timeValue8, percentChange8, amountChange8, resultTextColor8, resultColor8] = getSecurityByTimeFrame(symbol8,timeframePeriod)
    [openValue9, closeValue9, highValue9, lowValue9, timeValue9, percentChange9, amountChange9, resultTextColor9, resultColor9] = getSecurityByTimeFrame(symbol9,timeframePeriod)
    [openValue10, closeValue10, highValue10, lowValue10, timeValue10, percentChange10, amountChange10, resultTextColor10, resultColor10] = getSecurityByTimeFrame(symbol10,timeframePeriod)
    [openValue11, closeValue11, highValue11, lowValue11, timeValue11, percentChange11, amountChange11, resultTextColor11, resultColor11] = getSecurityByTimeFrame(symbol11,timeframePeriod)
    [openValue12, closeValue12, highValue12, lowValue12, timeValue12, percentChange12, amountChange12, resultTextColor12, resultColor12] = getSecurityByTimeFrame(symbol12,timeframePeriod)
    [openValue13, closeValue13, highValue13, lowValue13, timeValue13, percentChange13, amountChange13, resultTextColor13, resultColor13] = getSecurityByTimeFrame(symbol13,timeframePeriod)
    [openValue14, closeValue14, highValue14, lowValue14, timeValue14, percentChange14, amountChange14, resultTextColor14, resultColor14] = getSecurityByTimeFrame(symbol14,timeframePeriod)
    [openValue15, closeValue15, highValue15, lowValue15, timeValue15, percentChange15, amountChange15, resultTextColor15, resultColor15] = getSecurityByTimeFrame(symbol15,timeframePeriod)
    [openValue16, closeValue16, highValue16, lowValue16, timeValue16, percentChange16, amountChange16, resultTextColor16, resultColor16] = getSecurityByTimeFrame(symbol16,timeframePeriod)
    [openValue17, closeValue17, highValue17, lowValue17, timeValue17, percentChange17, amountChange17, resultTextColor17, resultColor17] = getSecurityByTimeFrame(symbol17,timeframePeriod)
    [openValue18, closeValue18, highValue18, lowValue18, timeValue18, percentChange18, amountChange18, resultTextColor18, resultColor18] = getSecurityByTimeFrame(symbol18,'15')
    addColor = closeValue18 <= addThreashold ? bearishColor : bullishColor


    table.cell(table_id = tcTable, column = 0, row = 0, text = timeframePeriod, bgcolor=color.new(resultColor1, tfTableOpacity), text_color=resultTextColor1, text_size=size.auto, width=4)

    if(showPercentChange)
        table.cell(table_id = tcTable, column = 1, row = 0, text = symbol1 + '\n' + str.tostring(percentChange1, '#.##') + '%', bgcolor=color.new(resultColor1, tfTableOpacity), text_color=resultTextColor1, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 2, row = 0, text = symbol2 + '\n' + str.tostring(percentChange2, '#.##') + '%', bgcolor=color.new(resultColor2, tfTableOpacity), text_color=resultTextColor2, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 3, row = 0, text = symbol3 + '\n' + str.tostring(percentChange3, '#.##') + '%', bgcolor=color.new(resultColor3, tfTableOpacity), text_color=resultTextColor3, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 4, row = 0, text = symbol4 + '\n' + str.tostring(percentChange4, '#.##') + '%', bgcolor=color.new(resultColor4, tfTableOpacity), text_color=resultTextColor4, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 5, row = 0, text = symbol5 + '\n' + str.tostring(percentChange5, '#.##') + '%', bgcolor=color.new(resultColor5, tfTableOpacity), text_color=resultTextColor5, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 6, row = 0, text = symbol6 + '\n' + str.tostring(percentChange6, '#.##') + '%', bgcolor=color.new(resultColor6, tfTableOpacity), text_color=resultTextColor6, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 7, row = 0, text = symbol7 + '\n' + str.tostring(percentChange7, '#.##') + '%', bgcolor=color.new(resultColor7, tfTableOpacity), text_color=resultTextColor7, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 8, row = 0, text = symbol8 + '\n' + str.tostring(percentChange8, '#.##') + '%', bgcolor=color.new(resultColor8, tfTableOpacity), text_color=resultTextColor8, text_size=size.auto, width=4)

        table.cell(table_id = tcTable, column = 9, row = 0, text = symbol9 + '\n' + str.tostring(percentChange9, '#.##') + '%', bgcolor=color.new(resultColor9, tfTableOpacity), text_color=resultTextColor9, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 10, row = 0, text = symbol10 + '\n' + str.tostring(percentChange10, '#.##') + '%', bgcolor=color.new(resultColor10, tfTableOpacity), text_color=resultTextColor10, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 11, row = 0, text = symbol11 + '\n' + str.tostring(percentChange11, '#.##') + '%', bgcolor=color.new(resultColor11, tfTableOpacity), text_color=resultTextColor11, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 12, row = 0, text = symbol12 + '\n' + str.tostring(percentChange12, '#.##') + '%', bgcolor=color.new(resultColor12, tfTableOpacity), text_color=resultTextColor12, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 13, row = 0, text = symbol13 + '\n' + str.tostring(percentChange13, '#.##') + '%', bgcolor=color.new(resultColor13, tfTableOpacity), text_color=resultTextColor13, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 14, row = 0, text = symbol14 + '\n' + str.tostring(percentChange14, '#.##') + '%', bgcolor=color.new(resultColor14, tfTableOpacity), text_color=resultTextColor14, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 15, row = 0, text = symbol15 + '\n' + str.tostring(percentChange15, '#.##') + '%', bgcolor=color.new(resultColor15, tfTableOpacity), text_color=resultTextColor15, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 16, row = 0, text = symbol16 + '\n' + str.tostring(percentChange16, '#.##') + '%', bgcolor=color.new(resultColor16, tfTableOpacity), text_color=resultTextColor16, text_size=size.auto, width=4)

    else
        table.cell(table_id = tcTable, column = 1, row = 0, text = symbol1 + '\n' + '$' + str.tostring(amountChange1, '#.##'), bgcolor=color.new(resultColor1, tfTableOpacity), text_color=resultTextColor1, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 2, row = 0, text = symbol2 + '\n' + '$' + str.tostring(amountChange2, '#.##'), bgcolor=color.new(resultColor2, tfTableOpacity), text_color=resultTextColor2, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 3, row = 0, text = symbol3 + '\n' + '$' + str.tostring(amountChange3, '#.##'), bgcolor=color.new(resultColor3, tfTableOpacity), text_color=resultTextColor3, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 4, row = 0, text = symbol4 + '\n' + '$' + str.tostring(amountChange4, '#.##'), bgcolor=color.new(resultColor4, tfTableOpacity), text_color=resultTextColor4, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 5, row = 0, text = symbol5 + '\n' + '$' + str.tostring(amountChange5, '#.##'), bgcolor=color.new(resultColor5, tfTableOpacity), text_color=resultTextColor5, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 6, row = 0, text = symbol6 + '\n' + '$' + str.tostring(amountChange6, '#.##'), bgcolor=color.new(resultColor6, tfTableOpacity), text_color=resultTextColor6, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 7, row = 0, text = symbol7 + '\n' + '$' + str.tostring(amountChange7, '#.##'), bgcolor=color.new(resultColor7, tfTableOpacity), text_color=resultTextColor7, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 8, row = 0, text = symbol8 + '\n' + '$' + str.tostring(amountChange8, '#.##'), bgcolor=color.new(resultColor8, tfTableOpacity), text_color=resultTextColor8, text_size=size.auto, width=4)

        table.cell(table_id = tcTable, column = 9, row = 0, text = symbol9 + '\n' + '$' + str.tostring(amountChange9, '#.##'), bgcolor=color.new(resultColor9, tfTableOpacity), text_color=resultTextColor9, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 10, row = 0, text = symbol10 + '\n' + '$' + str.tostring(amountChange10, '#.##'), bgcolor=color.new(resultColor10, tfTableOpacity), text_color=resultTextColor10, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 11, row = 0, text = symbol11 + '\n' + '$' + str.tostring(amountChange11, '#.##'), bgcolor=color.new(resultColor11, tfTableOpacity), text_color=resultTextColor11, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 12, row = 0, text = symbol12 + '\n' + '$' + str.tostring(amountChange12, '#.##'), bgcolor=color.new(resultColor12, tfTableOpacity), text_color=resultTextColor12, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 13, row = 0, text = symbol13 + '\n' + '$' + str.tostring(amountChange13, '#.##'), bgcolor=color.new(resultColor13, tfTableOpacity), text_color=resultTextColor13, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 14, row = 0, text = symbol14 + '\n' + '$' + str.tostring(amountChange14, '#.##'), bgcolor=color.new(resultColor14, tfTableOpacity), text_color=resultTextColor14, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 15, row = 0, text = symbol15 + '\n' + '$' + str.tostring(amountChange15, '#.##'), bgcolor=color.new(resultColor15, tfTableOpacity), text_color=resultTextColor15, text_size=size.auto, width=4)
        table.cell(table_id = tcTable, column = 16, row = 0, text = symbol16 + '\n' + '$' + str.tostring(amountChange16, '#.##'), bgcolor=color.new(resultColor16, tfTableOpacity), text_color=resultTextColor16, text_size=size.auto, width=4)

    //VIX
    table.cell(table_id = tcTable, column = 17, row = 0, text = symbol17 + '\n' + '$' + str.tostring(closeValue17, '#.##'), bgcolor=color.new(resultColor17, tfTableOpacity), text_color=resultTextColor17, text_size=size.auto, width=4)

    //ADD
    table.cell(table_id = tcTable, column = 18, row = 0, text = "ADD" + '\n' + str.tostring(closeValue18, '#.##'), bgcolor=color.new(addColor, tfTableOpacity), text_color=resultTextColor18, text_size=size.auto, width=4)

//##################################################################################################
//Ticker Details
//SPY, QQQ, VXX, XBI, XHB, XLB, XLC, XLE, XLF, XLI, XLK, XLP, XLRE, XLU, XLY, XLV, XRT, XOP, IBB, IYT, TLT, SMH
//##################################################################################################


//##################################################################################################
//FTFC
//##################################################################################################
// do not show timeframes that are less than the time frame selected (it will be inaccurate)
if barstate.islast
    //var table tcTable = table.new(position=position.top_right, columns = 28, rows = 20, frame_width=frameWidth, border_width=cellWidth)
    var table tcTable = table.new(position=position.top_right, columns = 28, rows = 20, border_width=cellWidth)

    // table.cell(table_id = tcTable, column = 0, row = 0, text = '')
    // table.cell(table_id = tcTable, column = 1, row = 0, text = '')
    // table.cell(table_id = tcTable, column = 2, row = 0, text = '')
    // table.cell(table_id = tcTable, column = 3, row = 0, text = '')
    // table.cell(table_id = tcTable, column = 4, row = 0, text = '')
    // table.cell(table_id = tcTable, column = 5, row = 0, text = '')
    // table.cell(table_id = tcTable, column = 6, row = 0, text = '')
    // table.cell(table_id = tcTable, column = 7, row = 0, text = '')

    addTableRow(tcTable,syminfo.ticker, "SPY","QQQ","DIA","IWM","SMH","XLK","XLC","XOP","XLE","XLP","XLU","XBI","XHB","XLB","XLY","VIX", "USI:ADD",timeframe.period)

