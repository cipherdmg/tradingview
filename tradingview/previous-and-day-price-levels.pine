// ||###################################################################################||
// ||                                                                                   ||
// ||  Day Trader Pre Market High and Low, Yesterday's High and Low, Daily High and Low ||
// ||  https://www.tradingview.com/script/1yLZ7nkU-BB-Indicator-Marks-High-and-low-of-premarket-daily-yesterday
// ||                                                                                   ||
// ||###################################################################################||
//@version=5

indicator(title='DayTrader Market Levels', shorttitle='DayTrader Market Levels', overlay=true)


// ||-----------------------------------------------------------------------------------||
// ||                                                                                   ||
// ||  Common Functions Used in all pine scripts                                        ||
// ||                                                                                   ||
// ||-----------------------------------------------------------------------------------||

f_daysinmonth(_year, _month) =>
//  ||-------------------------------------------------------------------------||
//    ||    Description: returns how many days there is in specified month.        ||
//    ||    Reference:                                                             ||
//    ||        https://cmcenroe.me/2014/12/05/days-in-month-formula.html          ||
//  ||                                                                         ||
//  || Usage:                                                                  ||
//  ||     m = f_daysinmonth(input(2021), input(1))                            ||
//  ||     plot(m, color=color.yellow)                                         ||
//  ||-------------------------------------------------------------------------||
    _m = _month < 1 ? 1 : _month > 12 ? 12 : _month
    28 + (_m == 2 and _year % 4 == 0 ? 1 : 0) + (_m + math.floor(_m / 8)) % 2 + 2 % _m + 2 * math.floor(1 / _m)
//    }|


f_pseudo_random_number(_range, _seed) =>
//  ||-------------------------------------------------------------------------||
//  ||  Description: The returned value will be a float value within range 0 -> _range parameter. ||
//  ||                                                                         ||
//  || Usage:                                                                  ||
//  ||     m = f_pseudo_random_number(100, 2.7182818285)                       ||
//  ||     plot(series=m, title='example', color=color.yellow)                 ||
//  ||-------------------------------------------------------------------------||
    _return = 1.0
    if na(_seed)
        _return := 3.14159 * nz(_return[1], 1) % 1
        _return
    else
        _return := 3.14159 * nz(_return[1], 1) % (1 + _seed)
        _return
    _return := _return % _range
    _return
//  }|--------------------------------------------------------------------<â€¢


//Daily high and low
dailyhigh = request.security(syminfo.tickerid, 'D', high)
dailylow = request.security(syminfo.tickerid, 'D', low)

//Yesterday high and low
previousdayhigh = request.security(syminfo.tickerid, 'D', high[1])
previousdaylow = request.security(syminfo.tickerid, 'D', low[1])

//Premarket high and low
t = time('1440', '0000-0930:23456')  // 1440 is the number of minutes in a whole day.
is_first = na(t[1]) and not na(t) or t[1] < t
ending_hour = 9
ending_minute = 30

pm_high = float(na)
pm_low = float(na)
k = int(na)

if is_first and barstate.isnew and (hour < ending_hour or hour >= 16 or hour == ending_hour and minute < ending_minute)
    pm_high := high
    pm_low := low
    pm_low
else
    pm_high := pm_high[1]
    pm_low := pm_low[1]
    pm_low

if high > pm_high and (hour < ending_hour or hour >= 16 or hour == ending_hour and minute < ending_minute)
    pm_high := high
    pm_high

if low < pm_low and (hour < ending_hour or hour >= 16 or hour == ending_hour and minute < ending_minute)
    pm_low := low
    pm_low

LastOnly = true

if LastOnly == true
    k := -9999
    k
else
    k := 0
    k

//Just a variable here for the label coordinates
td = time - time[5]

//Daily high and low lines
plot(dailyhigh, style=plot.style_line, title='Daily high', color=color.new(#FFFFFF, 0), linewidth=2, trackprice=true, offset=k)
dh = label.new(x=time + td, y=dailyhigh, text='Daily high', xloc=xloc.bar_time, style=label.style_none, textcolor=#FFFFFF, size=size.normal, textalign=text.align_right)
label.delete(dh[1])

plot(dailylow, style=plot.style_line, title='Daily low', color=color.new(#8300FF, 0), linewidth=2, trackprice=true, offset=k)
dl = label.new(x=time + td, y=dailylow, text='Daily low', xloc=xloc.bar_time, style=label.style_none, textcolor=#8300FF, size=size.normal, textalign=text.align_right)
label.delete(dl[1])

//Previous day high and low lines
plot(previousdayhigh, style=plot.style_line, title='Yesterday\'s high', color=color.new(#FF6800, 0), linewidth=2, trackprice=true, offset=k)
pdh = label.new(x=time + td, y=previousdayhigh, text='Yesterday\'s high', xloc=xloc.bar_time, style=label.style_none, textcolor=#FF6800, size=size.normal, textalign=text.align_right)
label.delete(pdh[1])

plot(previousdaylow, style=plot.style_line, title='Yesterday\'s low', color=color.new(#00ECFF, 0), linewidth=2, trackprice=true, offset=k)
pdl = label.new(x=time + td, y=previousdaylow, text='Yesterday\'s low', xloc=xloc.bar_time, style=label.style_none, textcolor=#00ECFF, size=size.normal, textalign=text.align_right)
label.delete(pdl[1])

//Premarket high and low lines
plot(pm_high, style=plot.style_line, title='Premarket high', trackprice=true, color=color.new(#16F000, 0), linewidth=2, offset=k)
pmh = label.new(x=time + td, y=pm_high, text='Premarket high', xloc=xloc.bar_time, style=label.style_none, textcolor=#16F000, size=size.normal, textalign=text.align_right)
label.delete(pmh[1])

plot(pm_low, style=plot.style_line, title='Premarket low', trackprice=true, color=color.new(#FF0000, 0), linewidth=2, offset=k)
pml = label.new(x=time + td, y=pm_low, text='Premarket low', xloc=xloc.bar_time, style=label.style_none, textcolor=#FF0000, size=size.normal, textalign=text.align_right)
label.delete(pml[1])

// hline(400, title='Pi', color=color.blue, linestyle=hline.style_dotted, linewidth=2, display=display.all)
